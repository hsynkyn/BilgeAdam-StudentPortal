// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250705092129_project_path_added_to_students")]
    partial class project_path_added_to_students
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(859),
                            EndDate = new DateOnly(2025, 3, 1),
                            Name = "A Blok 101",
                            StartDate = new DateOnly(2024, 10, 1),
                            Status = 1,
                            TeacherId = new Guid("aaa00001-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(864),
                            EndDate = new DateOnly(2025, 2, 15),
                            Name = "B Blok 202",
                            StartDate = new DateOnly(2024, 9, 15),
                            Status = 1,
                            TeacherId = new Guid("aaa00003-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(866),
                            EndDate = new DateOnly(2025, 4, 30),
                            Name = "C Blok 303",
                            StartDate = new DateOnly(2024, 11, 1),
                            Status = 1,
                            TeacherId = new Guid("aaa00002-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalHour")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(589),
                            Description = "Yapay Zeka Eğitimi",
                            Name = "Yapay Zeka",
                            Status = 1,
                            TotalHour = 120
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(609),
                            Description = ".Net Core MVC",
                            Name = "Web Programlama",
                            Status = 1,
                            TotalHour = 100
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.CustomerManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CustomerManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0000001-0000-0000-0000-000000000001"),
                            AppUserId = new Guid("d0000001-0000-0000-0000-000000000001"),
                            Birthdate = new DateOnly(1990, 4, 15),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(1110),
                            Email = "zeynep.yilmaz@example.com",
                            FirstName = "Zeynep",
                            HireDate = new DateOnly(2022, 1, 10),
                            LastName = "Yılmaz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e0000001-0000-0000-0000-000000000002"),
                            AppUserId = new Guid("d0000001-0000-0000-0000-000000000002"),
                            Birthdate = new DateOnly(1988, 9, 25),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(1113),
                            Email = "burak.koc@example.com",
                            FirstName = "Burak",
                            HireDate = new DateOnly(2021, 11, 5),
                            LastName = "Koç",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e0000001-0000-0000-0000-000000000003"),
                            AppUserId = new Guid("d0000001-0000-0000-0000-000000000003"),
                            Birthdate = new DateOnly(1992, 6, 30),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(1115),
                            Email = "derya.ates@example.com",
                            FirstName = "Derya",
                            HireDate = new DateOnly(2023, 3, 1),
                            LastName = "Ateş",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Exam1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Exam2")
                        .HasColumnType("double precision");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("ProjectExam")
                        .HasColumnType("double precision");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectPath")
                        .HasColumnType("text");

                    b.Property<double>("RegisterPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000001"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000001"),
                            Birthdate = new DateOnly(2000, 5, 10),
                            ClassroomId = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(939),
                            Email = "ahmet1@mail.com",
                            Exam1 = 70.0,
                            Exam2 = 80.0,
                            FirstName = "Ahmet",
                            LastName = "Yıldız",
                            ProjectExam = 90.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1500.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000002"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000002"),
                            Birthdate = new DateOnly(1999, 3, 15),
                            ClassroomId = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(947),
                            Email = "busra2@mail.com",
                            Exam1 = 60.0,
                            Exam2 = 75.0,
                            FirstName = "Büşra",
                            LastName = "Demir",
                            ProjectExam = 85.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1450.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000003"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000003"),
                            Birthdate = new DateOnly(2001, 8, 20),
                            ClassroomId = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(950),
                            Email = "can3@mail.com",
                            Exam1 = 55.0,
                            Exam2 = 65.0,
                            FirstName = "Can",
                            LastName = "Kara",
                            ProjectExam = 75.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1350.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000004"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000004"),
                            Birthdate = new DateOnly(2000, 11, 5),
                            ClassroomId = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(953),
                            Email = "deniz4@mail.com",
                            Exam1 = 45.0,
                            Exam2 = 50.0,
                            FirstName = "Deniz",
                            LastName = "Aydın",
                            ProjectExam = 70.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1400.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000005"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000005"),
                            Birthdate = new DateOnly(2000, 6, 1),
                            ClassroomId = new Guid("c1000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(956),
                            Email = "emre5@mail.com",
                            Exam1 = 85.0,
                            Exam2 = 90.0,
                            FirstName = "Emre",
                            LastName = "Aslan",
                            ProjectExam = 95.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1600.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000006"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000006"),
                            Birthdate = new DateOnly(2000, 1, 10),
                            ClassroomId = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(960),
                            Email = "fatma6@mail.com",
                            Exam1 = 50.0,
                            Exam2 = 55.0,
                            FirstName = "Fatma",
                            LastName = "Çelik",
                            ProjectExam = 60.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1250.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000007"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000007"),
                            Birthdate = new DateOnly(1999, 12, 15),
                            ClassroomId = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(963),
                            Email = "gokhan7@mail.com",
                            Exam1 = 65.0,
                            Exam2 = 70.0,
                            FirstName = "Gökhan",
                            LastName = "Şimşek",
                            ProjectExam = 75.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1300.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000008"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000008"),
                            Birthdate = new DateOnly(2001, 2, 25),
                            ClassroomId = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(966),
                            Email = "hale8@mail.com",
                            Exam1 = 90.0,
                            Exam2 = 95.0,
                            FirstName = "Hale",
                            LastName = "Yalçın",
                            ProjectExam = 100.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1700.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000009"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000009"),
                            Birthdate = new DateOnly(2000, 4, 3),
                            ClassroomId = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(969),
                            Email = "ismail9@mail.com",
                            Exam1 = 70.0,
                            Exam2 = 65.0,
                            FirstName = "İsmail",
                            LastName = "Öztürk",
                            ProjectExam = 80.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1500.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000010"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000010"),
                            Birthdate = new DateOnly(2000, 9, 9),
                            ClassroomId = new Guid("c2000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(972),
                            Email = "jale10@mail.com",
                            Exam1 = 60.0,
                            Exam2 = 60.0,
                            FirstName = "Jale",
                            LastName = "Bilgin",
                            ProjectExam = 65.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1400.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000011"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000011"),
                            Birthdate = new DateOnly(2001, 5, 12),
                            ClassroomId = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(976),
                            Email = "kaan11@mail.com",
                            Exam1 = 80.0,
                            Exam2 = 85.0,
                            FirstName = "Kaan",
                            LastName = "Bozkurt",
                            ProjectExam = 75.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1550.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000012"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000012"),
                            Birthdate = new DateOnly(2001, 1, 8),
                            ClassroomId = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(979),
                            Email = "leyla12@mail.com",
                            Exam1 = 55.0,
                            Exam2 = 60.0,
                            FirstName = "Leyla",
                            LastName = "Karaca",
                            ProjectExam = 70.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1350.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000013"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000013"),
                            Birthdate = new DateOnly(2001, 7, 17),
                            ClassroomId = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(982),
                            Email = "mert13@mail.com",
                            Exam1 = 65.0,
                            Exam2 = 50.0,
                            FirstName = "Mert",
                            LastName = "Tunç",
                            ProjectExam = 60.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1250.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000014"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000014"),
                            Birthdate = new DateOnly(2000, 6, 30),
                            ClassroomId = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(985),
                            Email = "nazli14@mail.com",
                            Exam1 = 75.0,
                            Exam2 = 85.0,
                            FirstName = "Nazlı",
                            LastName = "Kurt",
                            ProjectExam = 90.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1600.0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddd00-0000-0000-0000-000000000015"),
                            AppUserId = new Guid("b0000001-0000-0000-0000-000000000015"),
                            Birthdate = new DateOnly(2001, 10, 10),
                            ClassroomId = new Guid("c3000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(988),
                            Email = "onur15@mail.com",
                            Exam1 = 90.0,
                            Exam2 = 90.0,
                            FirstName = "Onur",
                            LastName = "Yavuz",
                            ProjectExam = 85.0,
                            ProjectPath = "defaultProject.zip",
                            RegisterPrice = 1650.0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaa00001-0000-0000-0000-000000000001"),
                            AppUserId = new Guid("c0000001-0000-0000-0000-000000000001"),
                            Birthdate = new DateOnly(1985, 6, 10),
                            CourseId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(773),
                            Email = "ali@example.com",
                            FirstName = "Ali",
                            HireDate = new DateOnly(2020, 1, 1),
                            LastName = "Yılmaz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("aaa00002-0000-0000-0000-000000000002"),
                            AppUserId = new Guid("c0000001-0000-0000-0000-000000000002"),
                            Birthdate = new DateOnly(1990, 3, 15),
                            CourseId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(787),
                            Email = "ayse@example.com",
                            FirstName = "Ayşe",
                            HireDate = new DateOnly(2021, 2, 10),
                            LastName = "Demir",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("aaa00003-0000-0000-0000-000000000003"),
                            AppUserId = new Guid("c0000001-0000-0000-0000-000000000003"),
                            Birthdate = new DateOnly(1980, 8, 22),
                            CourseId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(791),
                            Email = "mehmet@example.com",
                            FirstName = "Mehmet",
                            HireDate = new DateOnly(2019, 9, 5),
                            LastName = "Kaya",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("aaa00004-0000-0000-0000-000000000004"),
                            AppUserId = new Guid("c0000001-0000-0000-0000-000000000004"),
                            Birthdate = new DateOnly(1992, 11, 30),
                            CourseId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 5, 12, 21, 28, 541, DateTimeKind.Local).AddTicks(795),
                            Email = "elif@example.com",
                            FirstName = "Elif",
                            HireDate = new DateOnly(2022, 5, 25),
                            LastName = "Aydın",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Classroom", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Teacher", "Teacher")
                        .WithMany("Classrooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Student", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Teacher", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Classroom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Course", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Teacher", b =>
                {
                    b.Navigation("Classrooms");
                });
#pragma warning restore 612, 618
        }
    }
}
