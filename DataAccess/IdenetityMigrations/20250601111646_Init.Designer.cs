// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.IdenetityMigrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20250601111646_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 973, DateTimeKind.Local).AddTicks(2536),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 973, DateTimeKind.Local).AddTicks(2550),
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 973, DateTimeKind.Local).AddTicks(2552),
                            Name = "Teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 973, DateTimeKind.Local).AddTicks(2554),
                            Name = "CustomerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1990, 1, 1),
                            ConcurrencyStamp = "011971bc-b0ce-4f31-a233-7139229d301f",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 43, 976, DateTimeKind.Local).AddTicks(147),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sistem",
                            LastName = "Yöneticisi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlWjzWQ58EfVEceyRAb1/f9US4NgbVUqMI4jJTDRejOb0BFmZ5Z2wZlIyYQnr6gDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4446d85b-db4b-44d4-83a4-4ed5d2312a32",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 5, 10),
                            ConcurrencyStamp = "1536e5fe-9d9d-4aff-ae2b-c7dcf13cb54a",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 18, DateTimeKind.Local).AddTicks(496),
                            Email = "ahmet1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET1@MAIL.COM",
                            NormalizedUserName = "AHMET1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcANyzDXx0Qk7e/vGcypMU9AUrkaKOWPduwH/0AZpSho5GxduFqK3KksxdrxlyOcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d075187-dd3f-40f5-827b-471528d2dd79",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmet1"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1999, 3, 15),
                            ConcurrencyStamp = "a7a3490a-b717-41e6-913a-f6e2eff83fbc",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 61, DateTimeKind.Local).AddTicks(5951),
                            Email = "busra2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Büşra",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRA2@MAIL.COM",
                            NormalizedUserName = "BUSRA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJRZ0IHmeTAtbzkWjmzQi5cu7Y7naBh53gjTgYS32Hn5tXni6M11nQBoihlRMjlqog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40806275-9567-4c9c-aabe-58f908f08746",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "busra2"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 8, 20),
                            ConcurrencyStamp = "2fdbd9cf-814b-452c-a141-258a2df90f5b",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 104, DateTimeKind.Local).AddTicks(3957),
                            Email = "can3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN3@MAIL.COM",
                            NormalizedUserName = "CAN3",
                            PasswordHash = "AQAAAAIAAYagAAAAEAhho0DKTB2XGCLgL1jVef6SKyMriXIizgynB90rqRu48/wSzJjO8NNp6/pNwmAL1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcac831f-4a67-49c4-bdd1-e7f8f326f765",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "can3"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 11, 5),
                            ConcurrencyStamp = "2b3f1188-9cf0-4e4b-ad50-23be35a62e15",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 149, DateTimeKind.Local).AddTicks(9120),
                            Email = "deniz4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ4@MAIL.COM",
                            NormalizedUserName = "DENIZ4",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVdN6z1cNNnz5wghgFvtRjwJbyzZYC8a9GcHK6X8Ug13hQYPskC4frsxnEWrjuAuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5bf0928-0103-4a86-9719-af0ebbcb8f6f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "deniz4"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 6, 1),
                            ConcurrencyStamp = "5f4600c1-d3d4-4b3a-9543-dc1d82647636",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 194, DateTimeKind.Local).AddTicks(597),
                            Email = "emre5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE5@MAIL.COM",
                            NormalizedUserName = "EMRE5",
                            PasswordHash = "AQAAAAIAAYagAAAAEF6TL5uZKhrtCCCpOtLgjut7EoFiLvlemN0eai2iUdWoem6OG0q0nsDafUWXJ5fJEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72edb15a-c88b-4fa9-8884-d9d0f8e93c54",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "emre5"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 1, 10),
                            ConcurrencyStamp = "735cffb6-8a0d-432c-b58f-5cc2e9bbd3d7",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 238, DateTimeKind.Local).AddTicks(5654),
                            Email = "fatma6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA6@MAIL.COM",
                            NormalizedUserName = "FATMA6",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFdzMrnbd2rDVwgvLt1KE5xPYOXpF/Q7dzA9D6KndGhShcVYuO+DI6TYRkBjr3Dxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7628be26-2aa9-4133-843f-c4e0071b4874",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "fatma6"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1999, 12, 15),
                            ConcurrencyStamp = "1617de97-1eec-4737-a522-fe1a54b20883",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 281, DateTimeKind.Local).AddTicks(9353),
                            Email = "gokhan7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            LastName = "Şimşek",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN7@MAIL.COM",
                            NormalizedUserName = "GOKHAN7",
                            PasswordHash = "AQAAAAIAAYagAAAAEAFDr/RwwK937gsqNBxMgrDDzwkaypl99gYuG5/3DLzH/3Y68aA7HWV8PTsTN2SPCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f086d2cc-1040-4f6e-84a3-1b434bc2d639",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "gokhan7"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 2, 25),
                            ConcurrencyStamp = "017589f6-adaf-401f-b8ac-4499c5dc3bc5",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 325, DateTimeKind.Local).AddTicks(7460),
                            Email = "hale8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Hale",
                            LastName = "Yalçın",
                            LockoutEnabled = false,
                            NormalizedEmail = "HALE8@MAIL.COM",
                            NormalizedUserName = "HALE8",
                            PasswordHash = "AQAAAAIAAYagAAAAEAWGeZVehhu0jM5h3fsoMHF8m4v+9XsTYO3qt49Nj7WvkCHbKdo8dlmx3DgI651QFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2cfbe36-2e0d-4791-9715-d65d53f90699",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "hale8"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 4, 3),
                            ConcurrencyStamp = "2ac85fd1-b6d2-4f49-a285-06fabe963272",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 369, DateTimeKind.Local).AddTicks(2514),
                            Email = "ismail9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "İsmail",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAIL9@MAIL.COM",
                            NormalizedUserName = "ISMAIL9",
                            PasswordHash = "AQAAAAIAAYagAAAAEBpMLACUJflLxPCrX1KpPYFcfohw7IZJJybmKFY6U+FCKobjSv4jHjdQ2BVeepCixg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "447defeb-f9b3-4fba-8245-5e2e28de866d",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ismail9"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 9, 9),
                            ConcurrencyStamp = "7a2ae388-138d-4918-94f9-1bdc72b8af89",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 412, DateTimeKind.Local).AddTicks(4227),
                            Email = "jale10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Jale",
                            LastName = "Bilgin",
                            LockoutEnabled = false,
                            NormalizedEmail = "JALE10@MAIL.COM",
                            NormalizedUserName = "JALE10",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMAQwo7gZeROO7IWZwHTmDHTSeda04BoU38XazjuciBkRnP3TnDnui67PWWKPOsaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d893a75-2988-4c4a-89da-48012f8b3b05",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "jale10"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 5, 12),
                            ConcurrencyStamp = "ede2997f-8a34-47c4-ae86-5027ed960d5c",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 456, DateTimeKind.Local).AddTicks(1187),
                            Email = "kaan11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Kaan",
                            LastName = "Bozkurt",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN11@MAIL.COM",
                            NormalizedUserName = "KAAN11",
                            PasswordHash = "AQAAAAIAAYagAAAAEFj9KPh3yJNbn9iB5yR0x80q90tbxrD3oMcdaOuHzASmsN7/b9gzVay0n1DfV4VOsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8aad5c0c-edc6-4e55-be63-0ed79828a7d0",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "kaan11"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 1, 8),
                            ConcurrencyStamp = "34944d64-d484-40b8-8591-a438c2440a24",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 503, DateTimeKind.Local).AddTicks(7792),
                            Email = "leyla12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Leyla",
                            LastName = "Karaca",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEYLA12@MAIL.COM",
                            NormalizedUserName = "LEYLA12",
                            PasswordHash = "AQAAAAIAAYagAAAAEGH0fwK4DkxD1jS0jdViDr2u0OXdOCO/MRbwJen0Jy3K94fiVRDqlr1CrNUqm66GdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56eac219-b679-4cb8-9a0b-57c5295a4a5c",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "leyla12"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 7, 17),
                            ConcurrencyStamp = "80635456-1e10-42f4-a2f1-fa6c844b6acf",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 548, DateTimeKind.Local).AddTicks(3546),
                            Email = "mert13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            LastName = "Tunç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT13@MAIL.COM",
                            NormalizedUserName = "MERT13",
                            PasswordHash = "AQAAAAIAAYagAAAAEHG2PckGEplGOamkX6biUAhGzO8LP8xssGe/u0G4DVX1CtlXkp91pBSXrdsyESVETA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5583356e-0b10-49cf-9755-454b2c3d6941",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "mert13"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000014"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2000, 6, 30),
                            ConcurrencyStamp = "92c3d06a-f02d-4594-9764-cbcf2e0a25cb",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 592, DateTimeKind.Local).AddTicks(5348),
                            Email = "nazli14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            LastName = "Kurt",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLI14@MAIL.COM",
                            NormalizedUserName = "NAZLI14",
                            PasswordHash = "AQAAAAIAAYagAAAAEKoFtnF/jOiW/O9dya3/d3KpAXfCwaReiwY5ECJPIiKlGs9xZVHQ6hZ/i/nwp3AQkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "836ab355-1583-4737-a3b6-f39b5f400685",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "nazli14"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000015"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(2001, 10, 10),
                            ConcurrencyStamp = "7cab77fb-49ae-4d29-9044-9e6014b9a7b3",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 637, DateTimeKind.Local).AddTicks(7559),
                            Email = "onur15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Onur",
                            LastName = "Yavuz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ONUR15@MAIL.COM",
                            NormalizedUserName = "ONUR15",
                            PasswordHash = "AQAAAAIAAYagAAAAENpfrAs5EOFnAQSGXivOcbHadRS5BmtDMrG4QOVSDtIXuyYHH1lrCy4Snif6wfps5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31a92ef6-31f6-46a0-af67-b5e5ab425fa2",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "onur15"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1980, 8, 22),
                            ConcurrencyStamp = "0ca0289d-d19c-4faa-bf3d-da14898ba7b1",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 678, DateTimeKind.Local).AddTicks(8566),
                            Email = "mehmet@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEIl7ELm91CMGZPY8cfu3EhNpVKRZInIfMQK5vK/PLP4RL4nLMw16+HLvcDt76BmCgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a195e29a-3998-4167-b050-6484f21dda26",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1992, 11, 30),
                            ConcurrencyStamp = "f378dd3c-6e97-4fa8-8827-02e6cd29cfab",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 719, DateTimeKind.Local).AddTicks(5174),
                            Email = "elif@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@EXAMPLE.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAIAAYagAAAAEAo6JlDbFuTj9t4Qh3DoExRGcB5tx4ts0kvDLtOQArCko6TJEA+ClXOduoydiXLtNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3506800c-20cc-431a-8303-a1c50d8dd075",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "elif"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1985, 6, 10),
                            ConcurrencyStamp = "13cb0b49-8be1-4338-9e78-77b115c2a7ff",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 763, DateTimeKind.Local).AddTicks(1329),
                            Email = "ali@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@EXAMPLE.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKflTQqRL+OcrdG/Pg25u7L6AFOS5hFYPcgtLgtQLC7q7Wukp4pTCgfR94FV2aJFaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62d181a9-2286-4056-986e-827debd574ae",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1990, 3, 15),
                            ConcurrencyStamp = "327c4fb7-1407-4596-9d2c-e22961379a11",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 804, DateTimeKind.Local).AddTicks(4157),
                            Email = "ayse@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE@EXAMPLE.COM",
                            NormalizedUserName = "AYSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHCbHLsQV33eSTXwyAwwNwZa4qMSqNMdsQfkGlT3ptMpwOeHotn5SM5yB7QksAAIkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a25326ec-237c-42a8-8bef-170ee82f9470",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ayse"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1990, 4, 15),
                            ConcurrencyStamp = "04d81f05-cffc-4231-9763-362e4d2d06cd",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 846, DateTimeKind.Local).AddTicks(2282),
                            Email = "zeynep.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEHU78XqwqUPheu4qUNv3NrkJMk0JYQlMkl0BIHDCepdtOSAL4Qe5MU4up2djO2Hrmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fa004d5-68fe-4dd5-a162-191fdf963eb9",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1988, 9, 25),
                            ConcurrencyStamp = "9e86d90c-6182-4ea5-add4-3e59cde6b5d9",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 890, DateTimeKind.Local).AddTicks(40),
                            Email = "burak.koc@example.com",
                            EmailConfirmed = true,
                            FirstName = "Burak",
                            LastName = "Koç",
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.KOC@EXAMPLE.COM",
                            NormalizedUserName = "BURAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+VDRqya5t94/cVTpwkNlbQ9hNuCIHQHPrPEFVSGc7CUbgKQyNwv1+MkELlgVOV+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18798b9c-8644-452e-8afa-18b6c213921a",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "burak"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1992, 6, 30),
                            ConcurrencyStamp = "32e7a159-dca7-4e2c-9a0d-d6709da6100b",
                            CreatedDate = new DateTime(2025, 6, 1, 14, 16, 44, 931, DateTimeKind.Local).AddTicks(7515),
                            Email = "derya.ates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Derya",
                            LastName = "Ateş",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYA.ATES@EXAMPLE.COM",
                            NormalizedUserName = "DERYA",
                            PasswordHash = "AQAAAAIAAYagAAAAECVYEgP9RILcuKWaUmPc1Om9qn/3qkun/ZVBSmirXqDssLb59rNWQIhH9zmwrabPvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cbdfd54-d923-4a00-9fb1-0b395795de4b",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "derya"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000005"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000006"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000007"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000008"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000009"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000010"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000011"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000012"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000013"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000014"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000015"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
