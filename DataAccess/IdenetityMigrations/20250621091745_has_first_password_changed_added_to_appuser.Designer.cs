// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.IdenetityMigrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20250621091745_has_first_password_changed_added_to_appuser")]
    partial class has_first_password_changed_added_to_appuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 6, 21, 12, 17, 45, 149, DateTimeKind.Local).AddTicks(3497),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 6, 21, 12, 17, 45, 149, DateTimeKind.Local).AddTicks(3525),
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 6, 21, 12, 17, 45, 149, DateTimeKind.Local).AddTicks(3527),
                            Name = "Teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 6, 21, 12, 17, 45, 149, DateTimeKind.Local).AddTicks(3538),
                            Name = "CustomerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFirsPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e323771b-374a-4a23-9ae5-51f153d69283",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHb0Gi6+ZPmrZKOFO2AdRLamYKfOJI1W7W8h5RKoNSUlsmd0KeyxoQjja6hAViN2mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be031a40-6628-4499-8cc6-e77bda21c02a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2bcf171-8894-4560-96e1-2afd90e69240",
                            Email = "ahmet1@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET1@MAIL.COM",
                            NormalizedUserName = "AHMET1",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXlaVtM3nCHWUdiq8+hoTbbxNOn21mMfRGzuTZH45GtedMehMn/6VIBvjNOEg8PGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c637735-3e6d-4098-b27e-8d44355e41c3",
                            TwoFactorEnabled = false,
                            UserName = "ahmet1"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2bf8548-246e-4c55-9f45-8a14be2ebc16",
                            Email = "busra2@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRA2@MAIL.COM",
                            NormalizedUserName = "BUSRA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEKZ+dmECMsHu0tPfjgAlfRu2luOV26i2OLFFcjRJRDf0773PFrfB3G7rICEeaOnH4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edd59b3b-32bd-4d30-9cb6-25dd85cf69f3",
                            TwoFactorEnabled = false,
                            UserName = "busra2"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89335cd9-66d3-4b4c-8e30-2e3702e51ecf",
                            Email = "can3@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN3@MAIL.COM",
                            NormalizedUserName = "CAN3",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsRfWBL4JNeWPLbYoSepTKPDUmhZWbUKTznAwEdAb8Q8ZH34ILDUSfdwhaFsHddPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9e09ce1-4b08-453a-b0cc-088f68c8f24d",
                            TwoFactorEnabled = false,
                            UserName = "can3"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "825e8838-2924-48a2-a718-6f084ba5344f",
                            Email = "deniz4@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ4@MAIL.COM",
                            NormalizedUserName = "DENIZ4",
                            PasswordHash = "AQAAAAIAAYagAAAAELTFzCpljo2AIdC/vLxVRK8wjb42nPaSJO1sd3m6ITyHZeFKfXbWki1STr07+bwwUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b635330-648b-4711-af52-13b4c024e28c",
                            TwoFactorEnabled = false,
                            UserName = "deniz4"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13b00c09-c189-498d-b1b9-e29106266fbd",
                            Email = "emre5@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE5@MAIL.COM",
                            NormalizedUserName = "EMRE5",
                            PasswordHash = "AQAAAAIAAYagAAAAEHWf7vWqVRPWv9zgfGJcPM177JRp0q+XW3poUKzDlSxM0yGpeu7XWlywKGwqCuU7rQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f01ca5b-04be-4c2b-a4f4-2529b89e46eb",
                            TwoFactorEnabled = false,
                            UserName = "emre5"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06af1710-fbdc-46ee-aed5-e3097c5bb910",
                            Email = "fatma6@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA6@MAIL.COM",
                            NormalizedUserName = "FATMA6",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfZ227eRLElAHU7jT7JqYqr2LjkTrLis0DRhB1Bf0RtkE4r9JzQtN+Od/S2XL7X2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f62def0c-e7e9-4d0b-9710-631941888e90",
                            TwoFactorEnabled = false,
                            UserName = "fatma6"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ef52080-19c4-4ae7-a151-3b791cbe0464",
                            Email = "gokhan7@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN7@MAIL.COM",
                            NormalizedUserName = "GOKHAN7",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8HlVegbc/fwtS7VJtK3C4QWVB2tVDDE5cRUgIkunYHxFlaJ6zN9vsW6BXdrZDt+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2382917e-37f9-488e-b2cf-70c38c43be6e",
                            TwoFactorEnabled = false,
                            UserName = "gokhan7"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83dfc2df-3296-4639-b62a-bcf99e632c7b",
                            Email = "hale8@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HALE8@MAIL.COM",
                            NormalizedUserName = "HALE8",
                            PasswordHash = "AQAAAAIAAYagAAAAEKzXHUhx1nAktdOZtWCkz5PjU/WwHXi8N0pTRCum0HQpI9olSY3OhNF3KNM/JA80jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dfa7b7e-8299-440b-ad7e-4d839e1a2e98",
                            TwoFactorEnabled = false,
                            UserName = "hale8"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50bd2201-dc33-4703-8362-7861c2b42f78",
                            Email = "ismail9@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAIL9@MAIL.COM",
                            NormalizedUserName = "ISMAIL9",
                            PasswordHash = "AQAAAAIAAYagAAAAEOgnISPzTGV1KYOF+ewpl2NxvpgY0tyEywpzDKkycPOca/qDWeA9K/5jrzTL+4R/GQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de781751-6e6d-4822-a2c0-f67e38591dd8",
                            TwoFactorEnabled = false,
                            UserName = "ismail9"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b416bc1d-633a-472b-b029-9e057cc5bc94",
                            Email = "jale10@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JALE10@MAIL.COM",
                            NormalizedUserName = "JALE10",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1I5IlZbgd/WamLsqiZFbuHREN1JLFB0lrWXBirT127Nv4nku1k2HM8k0IitygbZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fc54991-8478-4f4a-ae8e-5765d25eca61",
                            TwoFactorEnabled = false,
                            UserName = "jale10"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "885c52d8-ca73-441b-a5b8-50af4320c991",
                            Email = "kaan11@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN11@MAIL.COM",
                            NormalizedUserName = "KAAN11",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDtWR0qjw6wxfeFZvc+EMGWj/OS27RYNOTBCTNtE17HbIwZvLS9ABBhYP/hzLEBTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9b2510d-3abc-406a-8813-c543da6f37dd",
                            TwoFactorEnabled = false,
                            UserName = "kaan11"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0347ded-3fa9-4d38-9f85-78e75dc7daaa",
                            Email = "leyla12@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LEYLA12@MAIL.COM",
                            NormalizedUserName = "LEYLA12",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmMpC856qzGJ5eMRMdoUpk7jmWGugFtNviLWvGV0otoECjR03LZvpmUL1sy6KgICQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "181ce716-e011-44d5-8181-6dfdb72a9965",
                            TwoFactorEnabled = false,
                            UserName = "leyla12"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4470b66-45df-4d7d-932e-38e93c8d127a",
                            Email = "mert13@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT13@MAIL.COM",
                            NormalizedUserName = "MERT13",
                            PasswordHash = "AQAAAAIAAYagAAAAENdFSnWHg25HXCm/fMCVyI1fYbBIL1tobrNZICDRn7qH5bNULuEfF94ZT1CIsLR7zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7566ef3-dd08-4656-9cdc-dbdbe4fe15e1",
                            TwoFactorEnabled = false,
                            UserName = "mert13"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000014"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47d7182d-501b-44fa-b785-988d3a324aea",
                            Email = "nazli14@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLI14@MAIL.COM",
                            NormalizedUserName = "NAZLI14",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1dOLkCZUj9pokDSFQo0T3wE41di9w5W/8LHpAEzCCzJWSHXpPaSTKHKynssbx0FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d292af1d-d0ed-47a7-99ec-355d4a1f824b",
                            TwoFactorEnabled = false,
                            UserName = "nazli14"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000015"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9de1629e-e0ec-4c68-9115-f590608518a4",
                            Email = "onur15@mail.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ONUR15@MAIL.COM",
                            NormalizedUserName = "ONUR15",
                            PasswordHash = "AQAAAAIAAYagAAAAELTMeQ1s3jRXaOwbddccg2RBHTHDUMq4RhVFcQs4tzBI0xlB7+mzWgirl3iMuJfIvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a037099e-4567-483f-8cc6-c92552cff9a9",
                            TwoFactorEnabled = false,
                            UserName = "onur15"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e9d7e0b-7b78-449c-9013-e09a03fbeaca",
                            Email = "mehmet@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTpYJL2G1/Nb1y91uh25luSrvbggjgw9y9A+38CuqoIhmD0TpX4JBl3THGdH32TjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5439356f-79d5-4e64-8f86-f50bf1aeb8de",
                            TwoFactorEnabled = false,
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7123e04-78ea-4b2d-90f6-70cca048f977",
                            Email = "elif@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@EXAMPLE.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAIAAYagAAAAELpy8mMXidmft5Hc4HzESABEf4fe3KSFrsqFq5me9pcbAD2dHctKl2vuWJemBaeMrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78a559cb-f212-4783-b2d0-558cdecd2140",
                            TwoFactorEnabled = false,
                            UserName = "elif"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d41620a-17b5-49f6-a5ef-43e4834d546a",
                            Email = "ali@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@EXAMPLE.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiFMFxs9KRYYAqjDARAi8dPX/CCPA56dpWAQINWzqX+Obuv/FqVdx2hV2eDYFtydw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80b6c450-ff69-48d4-8336-05b7d86feb8b",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1ded0fe-c00d-4ce8-b789-5982ae3703f0",
                            Email = "ayse@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE@EXAMPLE.COM",
                            NormalizedUserName = "AYSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAPLNYvMcWsDM/KPRqw8yxN7ESTH0l64r/GTJnytArMDVvjENXSWD9JlbdPhjzmuAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee0bcd91-3fbd-45e3-9b67-7176fbc65f7e",
                            TwoFactorEnabled = false,
                            UserName = "ayse"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c21994df-1906-4e6d-9193-5b1ed8371f55",
                            Email = "zeynep.yilmaz@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFRTJO4eWX+VbevEv0PSdTDcYJQknPpZh+Eqcs+VDQj7t+zV/WJ9HD719mh3c0HMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6762f506-8af2-4188-8748-e3b5edf636c7",
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6587a673-1cc3-4156-a205-d330eb390f73",
                            Email = "burak.koc@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.KOC@EXAMPLE.COM",
                            NormalizedUserName = "BURAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEE3RqBGiuhsmOlsv22iOII0mhmmoAeIdYp0GkDEyU35KEsklRTBC5BXcgjTSwhwa0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4becf55c-264c-419c-bdfe-e79546e26036",
                            TwoFactorEnabled = false,
                            UserName = "burak"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c74727a3-27ae-49d3-a2ab-eb732e776427",
                            Email = "derya.ates@example.com",
                            EmailConfirmed = true,
                            HasFirsPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYA.ATES@EXAMPLE.COM",
                            NormalizedUserName = "DERYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9BotEdcOrB50gWAVo9FkvTziSQ7iLXCtjlkCAxMnHsy9jcG41/CAZKMWs+zeQcVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c751c3fb-9292-4a8c-90ef-2d56bf1672a9",
                            TwoFactorEnabled = false,
                            UserName = "derya"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000005"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000006"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000007"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000008"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000009"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000010"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000011"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000012"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000013"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000014"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000015"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
