// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.IdenetityMigrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20250621084951_baseperson_infos_deleted_from_appuser")]
    partial class baseperson_infos_deleted_from_appuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 6, 21, 11, 49, 50, 920, DateTimeKind.Local).AddTicks(3640),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 6, 21, 11, 49, 50, 920, DateTimeKind.Local).AddTicks(3665),
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 6, 21, 11, 49, 50, 920, DateTimeKind.Local).AddTicks(3667),
                            Name = "Teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 6, 21, 11, 49, 50, 920, DateTimeKind.Local).AddTicks(3668),
                            Name = "CustomerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ce5f5ba-3833-43c0-977b-74e902a6acb8",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIcICbRMGb0dAStOVEH1fLVa4+9VG1BDmZ4Bcj/CY/OsvOlG6af4Mo3k7TdpXnvcMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecddcd92-8755-41f4-b789-de4a307ca6a9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29599cbc-d4a7-4559-9789-f5ca114fe1c1",
                            Email = "ahmet1@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET1@MAIL.COM",
                            NormalizedUserName = "AHMET1",
                            PasswordHash = "AQAAAAIAAYagAAAAECZ46QCFaCdebUPq/pOG4CZu69W54qbr+HeV79NEb8DsbiL0HSx1oz6fKvzlik34lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98194283-2fd1-44ce-8bfb-b429093ed633",
                            TwoFactorEnabled = false,
                            UserName = "ahmet1"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e08d284f-3b7c-4f52-b4b2-c40d97ba9f4d",
                            Email = "busra2@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRA2@MAIL.COM",
                            NormalizedUserName = "BUSRA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZ8KHgJ9XWhWuWNYW7Ch8vJA/mNqHiCHWd8s+3W2GrhbC5aRbyKFRvxilHfxHIYxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9b42b13-20af-4d4d-b549-253fbd029fed",
                            TwoFactorEnabled = false,
                            UserName = "busra2"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb764b39-d0c2-4f94-b8f2-c3825e5efc95",
                            Email = "can3@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN3@MAIL.COM",
                            NormalizedUserName = "CAN3",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjv0Rry4cezMTQPBPtKGh9jXbneJGOxpzDuS6llzilFp1Z8ywVGNBZMf4jNy8wCWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52276a91-ef0e-4e02-8451-1af99ce45ff6",
                            TwoFactorEnabled = false,
                            UserName = "can3"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b3622b7-aaa8-409f-98cc-68137addc83e",
                            Email = "deniz4@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ4@MAIL.COM",
                            NormalizedUserName = "DENIZ4",
                            PasswordHash = "AQAAAAIAAYagAAAAEN/LJHsbP+c2yrxToV3mL14tLF/y7qz3+YVKW+cOQp6JebcjIYBZcX0woPXu25O3/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c458230-1523-4774-898e-3feedaf356bd",
                            TwoFactorEnabled = false,
                            UserName = "deniz4"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fd4a8f2-b924-481a-8988-5cbf19dfe3f7",
                            Email = "emre5@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE5@MAIL.COM",
                            NormalizedUserName = "EMRE5",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcDT1C4XWequv5k1deqIOKqnS5Hd0QrojoRt1TFpv30t36Yi6bSMZRt5qLxIXgoGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b871fa7-0961-449b-b31e-6d46f119b3a8",
                            TwoFactorEnabled = false,
                            UserName = "emre5"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "758857c8-d0a3-4c23-9de3-3a5abd8d0163",
                            Email = "fatma6@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA6@MAIL.COM",
                            NormalizedUserName = "FATMA6",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/RT82pph5aLWtRQ9/tEcJ13wtRMggML9sLevujk+l1VXcAtkOc/wLujABZKxVGkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef06d3d7-ffe0-4814-afea-26a6451248e2",
                            TwoFactorEnabled = false,
                            UserName = "fatma6"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cd46b43-0025-4e54-9dbe-9b6d721ea5ee",
                            Email = "gokhan7@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN7@MAIL.COM",
                            NormalizedUserName = "GOKHAN7",
                            PasswordHash = "AQAAAAIAAYagAAAAEHe+VeiwKcPbZ24k1CqRCpA1JOyMLXVJYXcnfw+gXa0meu8/zkpLoBUwigKQllnEYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc03a2f1-d125-4f0c-a62b-74ce2fc0c55b",
                            TwoFactorEnabled = false,
                            UserName = "gokhan7"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d514aa33-c7f5-425b-8d9d-f7e2577445dd",
                            Email = "hale8@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HALE8@MAIL.COM",
                            NormalizedUserName = "HALE8",
                            PasswordHash = "AQAAAAIAAYagAAAAECCGRTBXiAmyNaZJT2CyjrG6lkpWQquHjFNLMmsWtexABAtAtnMWf4D3dD7+l+Byqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15c0df09-e5d4-4218-a99c-ae0043861cfd",
                            TwoFactorEnabled = false,
                            UserName = "hale8"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "273c8324-a16b-4799-b5c1-78a01bc31e4f",
                            Email = "ismail9@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAIL9@MAIL.COM",
                            NormalizedUserName = "ISMAIL9",
                            PasswordHash = "AQAAAAIAAYagAAAAEECOVOzcflQDWaClxJj+v4H3kGeKaQiqXAoKNDKkVdUStRvFFwp4WvYLkYQ1J/RJSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3096433-6dad-4031-90f7-c61401d65497",
                            TwoFactorEnabled = false,
                            UserName = "ismail9"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38137fc0-3751-43a1-abab-bcc3eaffd357",
                            Email = "jale10@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JALE10@MAIL.COM",
                            NormalizedUserName = "JALE10",
                            PasswordHash = "AQAAAAIAAYagAAAAENgSs7985YmvjYgKLZCVIAjJlYiQU5tFj+qUMR/zSXnsxKSfcTarCjFJHJ/RvKBOAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb07686a-a695-42c3-82d0-d6c4eef0f07b",
                            TwoFactorEnabled = false,
                            UserName = "jale10"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd57749-92d8-4c79-bf93-93b9522ccbdf",
                            Email = "kaan11@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN11@MAIL.COM",
                            NormalizedUserName = "KAAN11",
                            PasswordHash = "AQAAAAIAAYagAAAAEFEObDeNF4Em65JwTiffRIgMOVnXtLjZ49EXhFukPSQQ701SYl08xvyz45KyNAYqwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1c64276-51d6-4834-bd4e-63700be3d265",
                            TwoFactorEnabled = false,
                            UserName = "kaan11"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09eab610-77fe-4c4a-86a5-b0fbf2ff8ec6",
                            Email = "leyla12@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LEYLA12@MAIL.COM",
                            NormalizedUserName = "LEYLA12",
                            PasswordHash = "AQAAAAIAAYagAAAAEP5/A/YixXdFYyWKtbVbKPsWfdZqkmmjYOtdcg9gJe5WgZsf3GNKmCCf6QUVMOfOug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "182b5fd8-cc2f-4353-80f6-84cc213336e0",
                            TwoFactorEnabled = false,
                            UserName = "leyla12"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ea238e4-fcaa-4316-adda-d77c2a918db5",
                            Email = "mert13@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT13@MAIL.COM",
                            NormalizedUserName = "MERT13",
                            PasswordHash = "AQAAAAIAAYagAAAAEGuToKOe8T4GNoufhoC7H1aQ32SEgRHhZq9gHO9Dpv8sLFC2TIfuZJM/Tmp9l7xsMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81f1e9df-550d-459f-8c04-7e2357cb8eb8",
                            TwoFactorEnabled = false,
                            UserName = "mert13"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000014"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7477a81-73f9-495b-a19c-8a86ce69ef18",
                            Email = "nazli14@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLI14@MAIL.COM",
                            NormalizedUserName = "NAZLI14",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXC2dEmGWdWh/VkKSy07dhA0PajdjJOc/CaPwm6X7ac12+Dy5AocP++ZJHSd6dA8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3685dfa-caa5-4981-b231-28579e1cbcd6",
                            TwoFactorEnabled = false,
                            UserName = "nazli14"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000015"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba12f069-8743-40ac-a982-28c0f75af875",
                            Email = "onur15@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ONUR15@MAIL.COM",
                            NormalizedUserName = "ONUR15",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaek/I3tc3kIuiEsn3QbrOhGrDlghkfaCjgu36m1PZoliNsl3RKc6ZlYTIROmFP6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7912237e-e65c-4e03-abe0-c74942910f85",
                            TwoFactorEnabled = false,
                            UserName = "onur15"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ece4a2aa-1c38-4055-af4d-f1e584178300",
                            Email = "mehmet@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEACK4BBdAMR8AjX4IAHXHt8GOFdNwd22hKCC2nBGNsnXyMp4SE6BJQ97OAHtBYDoyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a808fc4-a4bb-419e-9211-c8c841717c32",
                            TwoFactorEnabled = false,
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1bf2888-3754-4be1-8837-3f7f78570210",
                            Email = "elif@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@EXAMPLE.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLSAPOhZGVhg48AoTb3We3L1dGD+T2Kd/M5L4uT4Hf8FsGKoQpQl3lcZhJK9oYbGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e9fcc98-1c8a-44c1-835b-b52d16fefc61",
                            TwoFactorEnabled = false,
                            UserName = "elif"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1512ebe-ecbc-4256-b229-eb8bef673c60",
                            Email = "ali@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@EXAMPLE.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvM/L/vCOlMil2ZvoliUI7FG+17Hk31xaWWhBiKnew9E3XJaPZavxiYCWzcRCRXAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cd99796-85d7-4098-9f53-3681a1663c28",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbaba49e-7720-47a9-84f0-4707f22aed30",
                            Email = "ayse@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE@EXAMPLE.COM",
                            NormalizedUserName = "AYSE",
                            PasswordHash = "AQAAAAIAAYagAAAAENAw/QSnYvZQZFmuwrHh7yvwwxWuEbrpXkShBcBOwMt88orwyz61MjVG/AODDogNSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0747ede-e4f2-4a4b-b98e-07e6c89ac1e8",
                            TwoFactorEnabled = false,
                            UserName = "ayse"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3129d709-b556-4b2d-82ce-d3c99e3270ba",
                            Email = "zeynep.yilmaz@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEDojEcxxBQHG2BHRdvrVYRq0uqXltWyaANDojs+vh2hwEiifJ9NrJtlEramrR2rAsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dcaf5deb-ae63-4f41-92f2-cbd08c06ebf3",
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54942315-4997-430f-8846-e724fed65566",
                            Email = "burak.koc@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.KOC@EXAMPLE.COM",
                            NormalizedUserName = "BURAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEBv/zxNW/+pAwabcfpm+gudCb6IQFpf9M29jjvIJpHf2D6dOC/zvz62tgA0myfENcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd2b7ad9-8fd9-4a24-b536-4aeb27f48e05",
                            TwoFactorEnabled = false,
                            UserName = "burak"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6acd2248-3acb-40f6-95a3-fe0b9043816e",
                            Email = "derya.ates@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYA.ATES@EXAMPLE.COM",
                            NormalizedUserName = "DERYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEINAVMwLYiEvJq+L7Xo4bTHAsB9CVTVTOZipwPIHvZorcipJOqjL+k4qv1elsCPJoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae62afd7-a388-40ed-a972-2a8e6952b0e0",
                            TwoFactorEnabled = false,
                            UserName = "derya"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000005"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000006"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000007"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000008"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000009"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000010"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000011"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000012"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000013"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000014"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000015"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
