// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.IdenetityMigrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20250629103059_hasfirstpasswordchanged_updated")]
    partial class hasfirstpasswordchanged_updated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 6, 29, 13, 30, 58, 346, DateTimeKind.Local).AddTicks(3818),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 6, 29, 13, 30, 58, 346, DateTimeKind.Local).AddTicks(3849),
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 6, 29, 13, 30, 58, 346, DateTimeKind.Local).AddTicks(3851),
                            Name = "Teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 6, 29, 13, 30, 58, 346, DateTimeKind.Local).AddTicks(3853),
                            Name = "CustomerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFirstPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc5db8c-6c8a-4367-9b87-e550aa82fda1",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEIIJv9+5PIo+0RWshQGkCP4aYWN/FBuIa4fTHGcEfnkPhmiv+R8kg6EyJQ4KX4Lcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bcd0e46-0e0d-4979-82ff-02dd36f666eb",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01cf6900-3c94-42e0-9895-129fc1d749d0",
                            Email = "ahmet1@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET1@MAIL.COM",
                            NormalizedUserName = "AHMET1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHl56ZBSQazAJDB0OkeeVSgGW96pZtKVKFYW2t10I+BUPLocPjZ2pq2C8fGwocv9EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95dbb2f0-ed9e-46cf-8aed-284ca8ea46cd",
                            TwoFactorEnabled = false,
                            UserName = "ahmet1"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f027f33-261c-4831-b2a7-cc38e15a4f33",
                            Email = "busra2@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRA2@MAIL.COM",
                            NormalizedUserName = "BUSRA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFMI2S8+X2Q4bxBkAocr/ce5LDfWyPy3LcQeKE0KrYVQPpWhf1pBtMTb9qImOEuOwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a3eaab6-95ee-491c-a842-e1b2489e36f9",
                            TwoFactorEnabled = false,
                            UserName = "busra2"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddd328fd-3700-490e-8ee6-222ccb43319a",
                            Email = "can3@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN3@MAIL.COM",
                            NormalizedUserName = "CAN3",
                            PasswordHash = "AQAAAAIAAYagAAAAECZHABWbXCiAkXysPb/ZN2NUBSb2ZOJhhbHdfFa/fWX0P1gPq0FdaqwfL7bFx2g+9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfef103c-c8aa-4779-9c29-8d28880757df",
                            TwoFactorEnabled = false,
                            UserName = "can3"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd133896-076f-4982-a29e-3244d8cb37bb",
                            Email = "deniz4@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ4@MAIL.COM",
                            NormalizedUserName = "DENIZ4",
                            PasswordHash = "AQAAAAIAAYagAAAAEALqzpc/LfGebCxBQ1hYhW4X795QQ06iwUQcEHk+1LwyifuBjbAo6Ynh9GzNbLY5Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a81f66c-174f-4fbf-b8c1-dc535b432a30",
                            TwoFactorEnabled = false,
                            UserName = "deniz4"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "677cbae7-6c95-4776-9100-68cbfcf9ff4f",
                            Email = "emre5@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE5@MAIL.COM",
                            NormalizedUserName = "EMRE5",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwFxVBYI4lOLHSdfwqaQh4nSlNtUC7e8yjRMh2Z99sT9vqdMP+rFzP8zS2PELzZSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90938922-1b1c-4786-ae85-4d1964b87b49",
                            TwoFactorEnabled = false,
                            UserName = "emre5"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df180f31-61cd-48c3-b3d5-82f73c0e4f12",
                            Email = "fatma6@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA6@MAIL.COM",
                            NormalizedUserName = "FATMA6",
                            PasswordHash = "AQAAAAIAAYagAAAAECkaGhEvp7ProrndUTXOgiC2P6Exv9jG72qHiz64McRa6PRZKKbiqUGvI67oPewh3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1df1ab17-513a-49c1-afa3-96ba770af48a",
                            TwoFactorEnabled = false,
                            UserName = "fatma6"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14cce3d8-4c76-4893-89f3-b072ed6e67a5",
                            Email = "gokhan7@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN7@MAIL.COM",
                            NormalizedUserName = "GOKHAN7",
                            PasswordHash = "AQAAAAIAAYagAAAAEE71CR2X8DnlowCAf0T7ne+ZulVW7rTG/0W7+0K9eZUbUbt9T/x7i/CyQB+j9pbMiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a45deb32-fa52-4752-b8cc-2b659a74265d",
                            TwoFactorEnabled = false,
                            UserName = "gokhan7"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd053156-a338-415c-b3f4-0b92bfd708a5",
                            Email = "hale8@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HALE8@MAIL.COM",
                            NormalizedUserName = "HALE8",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQ8n7iHyh+OhFKJj7aJ9guP2hdPNM993zcnI5mQvdlwwliq9lIoz9oqjOeXCpWvZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c534e25-a216-493e-b211-bf2e12fdb43a",
                            TwoFactorEnabled = false,
                            UserName = "hale8"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08837f9e-aaa7-4184-9a83-bd5ce5c3bfef",
                            Email = "ismail9@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAIL9@MAIL.COM",
                            NormalizedUserName = "ISMAIL9",
                            PasswordHash = "AQAAAAIAAYagAAAAEFtS3YCUjGxOS95mxkdICkMUznkqst0AHVWzzv+1r9EoYiQot/WRq2Ur/Hp5R34JGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b4fc0fa-5191-4e6c-9fa5-958cade337cc",
                            TwoFactorEnabled = false,
                            UserName = "ismail9"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1903708e-2613-418a-b24b-b7fe4849e5e7",
                            Email = "jale10@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JALE10@MAIL.COM",
                            NormalizedUserName = "JALE10",
                            PasswordHash = "AQAAAAIAAYagAAAAED2FXM1PxtgLivUKiqnf1iVIlwZHty6mCfPzHZoLuTEiVyYHqULi/9nTjNjDRUI7qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e200c697-ae31-4716-a6ac-2f4355ff505f",
                            TwoFactorEnabled = false,
                            UserName = "jale10"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f6d025c-7460-4033-a10a-0d92dee584ab",
                            Email = "kaan11@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN11@MAIL.COM",
                            NormalizedUserName = "KAAN11",
                            PasswordHash = "AQAAAAIAAYagAAAAEEW9NMdTaaiuDfZN5HBRMa3lHcypI9CqYxviSb8D7AatymXz6BwBts/Phm/YgT9C5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f64631f-69b4-4f39-a29b-e3490f0ef478",
                            TwoFactorEnabled = false,
                            UserName = "kaan11"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e828f6e9-4be8-4d10-ad20-5449786b4d93",
                            Email = "leyla12@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LEYLA12@MAIL.COM",
                            NormalizedUserName = "LEYLA12",
                            PasswordHash = "AQAAAAIAAYagAAAAENuTCykTofgqZoPxb6TV5z9LRMaJTX8ENO130yOk1ApufzZaNhN/KjWJABlmWjZY0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a55e18b4-2cc1-4fcf-96fe-b26c22a7bfa8",
                            TwoFactorEnabled = false,
                            UserName = "leyla12"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4d72e81-9b39-44af-af59-2f1b49611391",
                            Email = "mert13@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT13@MAIL.COM",
                            NormalizedUserName = "MERT13",
                            PasswordHash = "AQAAAAIAAYagAAAAEI9s4On1FtHoNJBlg0BJ89E99I0o5Xwojrwtg/6UDcVQc3RdpYEnDh7JNhhue3Wz1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b0c8a85-3555-4a7c-864f-dad80f99d100",
                            TwoFactorEnabled = false,
                            UserName = "mert13"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000014"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56d97cd4-fd6b-47bc-a35a-fb3556367b56",
                            Email = "nazli14@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLI14@MAIL.COM",
                            NormalizedUserName = "NAZLI14",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHU7CdelBKDNifsu8V/jdh5/jCGBBEgspEy/ATMmc2y1rHaod/4pRj8x68F5WQ2Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b27f6829-6c58-441d-94f1-76b8644bd6cd",
                            TwoFactorEnabled = false,
                            UserName = "nazli14"
                        },
                        new
                        {
                            Id = new Guid("b0000001-0000-0000-0000-000000000015"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed941b7d-245f-421e-aaa9-c9ce046101c0",
                            Email = "onur15@mail.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ONUR15@MAIL.COM",
                            NormalizedUserName = "ONUR15",
                            PasswordHash = "AQAAAAIAAYagAAAAEJO/jj15hQZ3RWNDibCnLZMKsSDCikJI45k59VEmBP2aWKt2JEuUEFX+Mpf2oBNwBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1d316c5-db9e-4bc4-9cc0-84ac5ace408a",
                            TwoFactorEnabled = false,
                            UserName = "onur15"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78fd69f6-cf90-4368-8a4c-df3a59dfd197",
                            Email = "mehmet@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEFux6iSLkcMEUQzGecNtBFLg95oDXKa+v3MY1G6kfWGdS7ky9FQLEIIpLWJNLc2sLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cbc7b26f-535c-444d-b9de-8e63444c5554",
                            TwoFactorEnabled = false,
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "662c3493-4c4c-4dbd-ac3c-0e04e8a0dc40",
                            Email = "elif@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@EXAMPLE.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAIAAYagAAAAEEIPb6DcfT6RyR3qiAUbW3/EQTYrWmy9B/MHlHSE1uCqsZnqO/mdLqf+f1To/EKNIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12d8659b-b229-4e03-8e15-0ed5ab9f3d2f",
                            TwoFactorEnabled = false,
                            UserName = "elif"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6d35f8e-611c-40a6-a378-f6151b6275c7",
                            Email = "ali@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@EXAMPLE.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcDtfWEVkPksHm5A55QIRR6aCMxxnaWEU799YlR7Dr+1thmGN3o8ldZRfOBzxyTQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17e98580-f5d5-42cd-b04a-0ed1ac24508d",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = new Guid("c0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8e792e0-bcc5-4512-b0af-82693f1af65f",
                            Email = "ayse@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE@EXAMPLE.COM",
                            NormalizedUserName = "AYSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEMM1jQShVCcysfcrNjJ9QW1L9il6kftNsmNBMAyRlB5Gxinm1+vLdWCH3QKaoT4LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd66c626-f117-4892-81bb-11c0fcb43ed4",
                            TwoFactorEnabled = false,
                            UserName = "ayse"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be89c74e-e4f0-429f-ab21-dad0e3b4f01f",
                            Email = "zeynep.yilmaz@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEPGQ9T8P7j+41p90nLUsshx52oHzSfjjmfFjHV0FJLtzu8Lgs9XyJnaGeRgsB0kTNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d3c6bce-d7b1-4a81-8ca5-3beb58550deb",
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af75712-8e95-4d85-b40b-68f6ffbf7254",
                            Email = "burak.koc@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.KOC@EXAMPLE.COM",
                            NormalizedUserName = "BURAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAe2jsmdJ3XXH+AZM78Jo+1AaofGP9QtHlHJ4Hgqh43Xy2emxv9OmsX+a5Iha6CgNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95f7ab6b-9d9b-4398-b1e6-8dc8a0bd89c2",
                            TwoFactorEnabled = false,
                            UserName = "burak"
                        },
                        new
                        {
                            Id = new Guid("d0000001-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9c46ab1-f779-4a46-b820-f747b7dfa793",
                            Email = "derya.ates@example.com",
                            EmailConfirmed = true,
                            HasFirstPasswordChanged = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYA.ATES@EXAMPLE.COM",
                            NormalizedUserName = "DERYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1TypDMMI/HpSeMm2IBGzqi6FeGIIDh1LLDdwgM50PgUFRq+VVV6B7IJFnDXtRXWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cd6793a-2a9b-43bd-b272-cf9bbe65749b",
                            TwoFactorEnabled = false,
                            UserName = "derya"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000005"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000006"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000007"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000008"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000009"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000010"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000011"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000012"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000013"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000014"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("b0000001-0000-0000-0000-000000000015"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("c0000001-0000-0000-0000-000000000004"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000001"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000002"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("d0000001-0000-0000-0000-000000000003"),
                            RoleId = new Guid("99999999-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
